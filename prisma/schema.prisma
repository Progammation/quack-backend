generator client {
  provider = "prisma-client-js"
  previewFeatures = ["ReferentialIntegrity"]
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                Int                          @id @default(autoincrement())
  username          String                       @unique
  name              String
  email             String                       @unique
  profilePicture    String
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @default(now()) @updatedAt
  collections       Collection[]
  sharedCollections CollectionSharedWith[]
}

model Collection {
  id         Int                          @id @default(autoincrement())
  name       String
  slug       String                       @unique
  bio        String?
  visibility CollectionVisibility         @default(PUBLIC) // PUBLIC, PRIVATE, PROTECTED
  userId     Int
  links      Link[]
  views      ViewCollection[]
  sharedWith CollectionSharedWith[]
  createdAt  DateTime                     @default(now())
  updatedAt  DateTime                     @default(now()) @updatedAt
  user       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CollectionVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

model CollectionSharedWith {
  id           Int        @id @default(autoincrement())
  collectionId Int
  sharedWithId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  sharedWith   User       @relation(fields: [sharedWithId], references: [id], onDelete: Cascade)
}

model ViewCollection {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model Link {
  id           Int        @id @default(autoincrement())
  name         String
  url          String
  collectionId Int
  views        ViewLink[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model ViewLink {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  linkId    Int
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
}
